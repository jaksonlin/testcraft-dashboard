# Docker Compose Configuration for TestCraft Dashboard
# Run from deployment directory or use wrapper at project root
#
# From deployment directory:
#   cd deployment && docker-compose up -d
#
# From project root (recommended):
#   docker-compose -f deployment/docker-compose.yml up -d
#   OR use the wrapper: ./docker-start.sh

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: testcraft-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-test_analytics_v2}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - testcraft-network
    restart: unless-stopped

  # Spring Boot Backend
  backend:
    build:
      context: ..
      dockerfile: deployment/Dockerfile.backend
    container_name: testcraft-backend
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB:-test_analytics_v2}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER:-postgres}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES:-prod}
      JAVA_OPTS: ${JAVA_OPTS:--Xmx512m -Xms256m}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - testcraft-network
    restart: unless-stopped
    # Uncomment to expose backend directly (for debugging)
    # ports:
    #   - "8090:8090"

  # React Frontend
  frontend:
    build:
      context: ..
      dockerfile: deployment/Dockerfile.frontend
    container_name: testcraft-frontend
    networks:
      - testcraft-network
    restart: unless-stopped
    # Uncomment to expose frontend directly (for debugging)
    # ports:
    #   - "5173:80"

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: testcraft-nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "${NGINX_PORT:-80}:80"
    depends_on:
      - backend
      - frontend
    networks:
      - testcraft-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 3s
      retries: 3
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local

networks:
  testcraft-network:
    driver: bridge
